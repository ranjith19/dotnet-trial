using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JWT;
using JWT.Serializers;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace trialSetuApp
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.Run(async (context) =>
            {
                string authHeader = context.Request.Headers["Authorization"];
                string[] parts = authHeader.Split(" ");
                string token = parts[1];

                string secret = "your-256-bit-secret";
                string audClaim = "wheelsemi.com";

                context.Response.ContentType = "application/json";

                try
                {
                    IJsonSerializer serializer = new JsonNetSerializer();
                    IDateTimeProvider provider = new UtcDateTimeProvider();
                    IJwtValidator validator = new JwtValidator(serializer, provider);
                    IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                    IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder);

                    var json = decoder.Decode(token, secret, verify: true);
                    Console.WriteLine(json);
                    var data = (JObject)JsonConvert.DeserializeObject(json);
                    string audClaimInToken = (string)data["aud"];
                    Console.WriteLine(audClaimInToken);
                    if (audClaim != audClaimInToken)
                    {
                        throw new SignatureVerificationException("invalid aud claim");
                    }
                    await context.Response.WriteAsync("{\"Hello\": \"World\"}");
                }
                catch (TokenExpiredException)
                {
                    Console.WriteLine("Token has expired");
                    context.Response.ContentType = "application/json";
                    await context.Response.WriteAsync("{\"Hello\": \"Error\"}");
                }
                catch (SignatureVerificationException)
                {
                    Console.WriteLine("Token has invalid signature");
                    await context.Response.WriteAsync("{\"Hello\": \"Error\"}");
                }
            });
        }
    }
}
